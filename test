# Create Neo4j Nodes
            insertEvents = session.run("UNWIND $events as eventPros CREATE (e:Event) SET e=eventPros MERGE (r:RemoteHosts {name:e.remoteHost,remoteHostname:e.remoteHostname}) MERGE (u:TargetUser {remoteHost: e.remoteHost,EventRecordIDs: [ ],subjectUsernames: [ ], name:e.targetUser}) MERGE (t:TargetHost {name:e.targetServer})",events=groupEvents)


# Create new 'TargetUsers' from 'Events' that contains 'SubjectUserNames' tags and 'TargetUserName' tags.
### Create new node by 'SubjectUsername' name.
updateTargetUserNode = session.run("MATCH (u:TargetUser),(e:Event),(r:RemoteHosts),(t:TargetHost) WHERE u.name=e.targetUser AND r.name=e.remoteHost AND t.name=e.targetServer AND u.remoteHost = r.name AND EXISTS(e.SubjectUserName) AND EXISTS(e.TargetUserName) AND NOT e.EventRecordID IN u.EventRecordIDs WITH collect(e.SubjectUserName) as subjectUsernames,e,u UNWIND subjectUsernames AS subjectUsername FOREACH(p IN subjectUsername | MERGE (b:TargetUser {name:p,EventRecordIDs: [ ],TargetUsernames: [ ],bindTargetUserSids: [ ]}) SET b.name=b.name+'(S)' SET (CASE WHEN NOT e.TargetUserName IN b.TargetUsernames THEN b END).TargetUsernames=b.TargetUsernames+e.TargetUserName SET (CASE WHEN NOT e.EventRecordID IN b.EventRecordIDs THEN b END).EventRecordIDs=b.EventRecordIDs+e.EventRecordID SET b.remoteHost = e.remoteHost SET b.IsSubjectUser = 'true' SET b.targetServer = e.targetServer SET b.hasTargetUsernameTag='true' SET b.hasSubjectUsernameTag='true' SET b.prodByEventRecordID=e.EventRecordID SET (CASE WHEN NOT e.TargetUserSid IN b.bindTargetUserSids THEN b END).bindTargetUserSids=b.bindTargetUserSids+e.TargetUserSid)")
### Create new node by 'TargetUsername' name.
updateTargetUserNode = session.run("MATCH (u:TargetUser),(e:Event),(r:RemoteHosts),(t:TargetHost) WHERE u.name=e.targetUser AND r.name=e.remoteHost AND t.name=e.targetServer AND u.remoteHost = r.name AND EXISTS(e.SubjectUserName) AND EXISTS(e.TargetUserName) AND NOT e.EventRecordID IN u.EventRecordIDs WITH collect(e.TargetUserName) as targetUsernames,e,u UNWIND targetUsernames AS targetUsername FOREACH(p IN targetUsername | MERGE (b:TargetUser {name:p,EventRecordIDs: [ ],SubjectUsernames: [ ],bindSubjectUserSids: [ ]}) SET b.name=b.name+'(T)' SET (CASE WHEN NOT e.EventRecordID IN b.EventRecordIDs THEN b END).EventRecordIDs=b.EventRecordIDs+e.EventRecordID SET (CASE WHEN NOT e.SubjectUserName IN b.SubjectUsernames THEN b END).SubjectUsernames=b.SubjectUsernames+e.SubjectUserName SET b.remoteHost = e.remoteHost SET b.IsSubjectUser = 'false' SET b.targetServer = e.targetServer SET b.hasTargetUsernameTag='true' SET b.hasSubjectUsernameTag='true' SET b.prodByEventRecordID=e.EventRecordID SET (CASE WHEN NOT e.SubjectUserSid IN b.bindSubjectUserSids THEN b END).bindSubjectUserSids=b.bindSubjectUserSids+e.SubjectUserSid)")


#createUpdateTargetUsers = session.run("MATCH (e:Event) WHERE EXISTS(e.SubjectUserName) AND EXISTS(e.TargetUserName) WITH collect(e.TargetUserName) as targetUsernames,e UNWIND targetUsernames AS targetUsername FOREACH(p IN targetUsername | MERGE (b:TargetUser {name:p,EventRecordIDs: [ ],SubjectUsernames: [ ],bindSubjectUserSids: [ ]}) SET b.name=b.name+'(T)' SET (CASE WHEN NOT e.EventRecordID IN b.EventRecordIDs THEN b END).EventRecordIDs=b.EventRecordIDs+e.EventRecordID SET (CASE WHEN NOT e.SubjectUserName IN b.SubjectUsernames THEN b END).SubjectUsernames=b.SubjectUsernames+e.SubjectUserName SET b.remoteHost = e.remoteHost SET b.IsSubjectUser = 'false' SET b.targetServer = e.targetServer SET b.hasTargetUsernameTag='true' SET b.hasSubjectUsernameTag='true' SET b.prodByEventRecordID=e.EventRecordID SET (CASE WHEN NOT e.SubjectUserSid IN b.bindSubjectUserSids THEN b END).bindSubjectUserSids=b.bindSubjectUserSids+e.SubjectUserSid SET b.TargetUserRealName=e.TargetUserName)")

            
            #updateTargetUserNode2 = session.run("MATCH (u:TargetUser),(e:Event),(r:RemoteHosts),(t:TargetHost) WHERE r.name=e.remoteHost AND t.name=e.targetServer AND u.remoteHost = r.name AND NOT e.EventRecordID IN u.EventRecordIDs AND u.hasTargetUsernameTag = 'false' SET u.EventRecordIDs=u.EventRecordIDs+e.EventRecordID SET u.targetServer = e.targetServer SET u.IsTargetUser = 'true' SET u.hasSubjectUsernameTag = 'true' SET u.hasTargetUsernameTag = 'false' SET u.IsEnabled='true'")

            # Unfold the TargetUser node which has SubjectUserNames and Create these Nodes.
            # Use MERGE instead of Create to avoid dublications.
            #updateSubjectUsernameNodes = session.run("MATCH (u:TargetUser) WHERE u.IsTargetUser='true' AND u.hasSubjectUsernameTag='true' AND u.hasTargetUsernameTag='true' WITH u.EventRecordIDs as eventRecordIDs, u.remoteHost as remoteHost, u.targetServer as targetServer, collect(u.subjectUsernames) as subjectUsernames UNWIND subjectUsernames AS subjectUsername FOREACH(p IN subjectUsername | MERGE (b:TargetUser {name:p}) SET b.EventRecordIDs = eventRecordIDs SET b.remoteHost = remoteHost SET b.IsSubjectUser = 'true' SET b.targetServer = targetServer)")


            # Update 'TargetUser' node from Events that has ONLY 'SubjectUsername' tag. 
            # 'NO' TargetUsername tag.
            #updateTargetUserNode2 = session.run("MATCH (u:TargetUser),(e:Event),(r:RemoteHosts),(t:TargetHost) WHERE u.name=e.targetUser AND r.name=e.remoteHost AND t.name=e.targetServer AND u.remoteHost = r.name AND e.SubjectUserName IS NOT NULL AND e.TargetUserName IS NULL AND NOT e.EventRecordID IN u.EventRecordIDs SET u.EventRecordIDs=u.EventRecordIDs+e.EventRecordID SET u.targetServer=e.targetServer SET u.IsTargetUser='true' SET u.hasSubjectUsernameTag='true' SET u.hasTargetUsernameTag='false'")
            
            #creataTargetUserNodes2 = session.run("MATCH (u:TargetUser),(e:Event),(r:RemoteHosts),(t:TargetHost) WHERE u.name <> e.targetUser AND r.name=e.remoteHost AND t.name=e.targetServer AND u.remoteHost = r.name AND e.SubjectUserName IS NOT NULL AND e.TargetUserName IS NULL AND NOT e.EventRecordID IN u.EventRecordIDs SET u.EventRecordIDs=u.EventRecordIDs+e.EventRecordID SET u.targetServer = e.targetServer SET u.IsTargetUser = 'true' SET u.hasSubjectUsernameTag = 'false' SET u.hasTargetUsernameTag = 'false' SET u.IsEnabled='true'")
            
            #AND NOT e.EventRecordID IN u.EventRecordIDs AND e.SubjectUserName IS NOT NULL AND e.TargetUsername IS NULL
            #SET b.IsTargetUser='true' SET b.hasSubjectUsernameTag='true' SET b.hasTargetUsernameTag='false'

            #createSubjectUsernameNode2 = session.run("MATCH (u:TargetUser) WHERE u.IsTargetUser = 'true' AND u.hasSubjectUsernameTag = 'true' AND u.hasTargetUsernameTag = 'false' WITH u.EventRecordIDs as eventRecordIDs, u.remoteHost as remoteHost, u.targetServer as targetServer, u.name as subjectUsername CREATE (b:TargetUser {name:subjectUsername}) SET b.EventRecordIDs = eventRecordIDs SET b.remoteHost = remoteHost SET b.IsSubjectUser = 'false' SET b.targetServer = targetServer")


            # Events that they have only TargetUsername set.
            # No 'SubjectUserName' tag exists.
            #updateTargetUserNode3 = session.run("MATCH (u:TargetUser),(e:Event),(r:RemoteHosts),(t:TargetHost) WHERE u.name=e.targetUser AND r.name=e.remoteHost AND t.name=e.targetServer AND u.remoteHost = r.name AND e.SubjectUserName IS NULL AND e.TargetUserName IS NOT NULL AND NOT e.EventRecordID IN u.EventRecordIDs SET u.EventRecordIDs=u.EventRecordIDs+e.EventRecordID SET u.targetServer = e.targetServer SET u.IsTargetUser = 'true' SET u.hasSubjectUsernameTag = 'false' SET u.hasTargetUsernameTag = 'true'")

            
            # Unfold the TargetUser node which has SubjectUserNames and Create these Nodes.
            # Use MERGE instead of Create to avoid dublications. 
            #createSubjectUsernameNode = session.run("MATCH (u:TargetUser) WHERE u.IsTargetUser='true' AND u.hasSubjectUsernameTag='false' AND u.hasTargetUsernameTag='true' WITH u.EventRecordIDs as eventRecordIDs, u.remoteHost as remoteHost, u.targetServer as targetServer, collect(u.subjectUsernames) as subjectUsernames UNWIND subjectUsernames AS subjectUsername FOREACH(p IN subjectUsername | MERGE (b:TargetUser {name:p}) SET b.EventRecordIDs = eventRecordIDs SET b.remoteHost = remoteHost SET b.IsSubjectUser = 'true' SET b.targetServer = targetServer)")
            
            # Has only SubjectUsername property. TargetUsername does not exist.
            # That means we don't need to bind SubjectUsername -> TargetUsername
            #createSubjectUsernameNode2 = session.run("MATCH (u:TargetUser) WHERE u.IsTargetUser = 'true' AND u.hasSubjectUsernameTag = 'true' AND u.hasTargetUsernameTag = 'false' WITH u.EventRecordIDs as eventRecordIDs, u.remoteHost as remoteHost, u.targetServer as targetServer, u.name as subjectUsername CREATE (b:TargetUser {name:subjectUsername}) SET b.EventRecordIDs = eventRecordIDs SET b.remoteHost = remoteHost SET b.IsSubjectUser = 'false' SET b.targetServer = targetServer")
        
            # Has only TargetUSerName property. SubjectUsername does not exist.
            # That means we don't need to bind  TargetUsername -> SubjectUsername
            #createSubjectUsernameNode3 = session.run("MATCH (u:TargetUser) WHERE u.IsTargetUser = 'true' AND u.hasSubjectUsernameTag = 'false' AND u.hasTargetUsernameTag = 'true' WITH u.EventRecordIDs as eventRecordIDs, u.remoteHost as remoteHost, u.targetServer as targetServer, u.name as targetUsername CREATE (b:TargetUser {name:targetUsername}) SET b.EventRecordIDs = eventRecordIDs SET b.remoteHost = remoteHost SET b.IsSubjectUser = 'false' SET b.targetServer = targetServer")
